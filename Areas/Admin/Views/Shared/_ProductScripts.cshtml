@model IEnumerable<SelectListItem>
@{
    var listatt = Model;
}
<script>
    $(document).ready(function () {
        $('#Detail').summernote();
    });

    const btnTabs = document.querySelectorAll(".btn-tab");

    btnTabs.forEach(btn => {
        btn.addEventListener("click", function () {

            btnTabs.forEach(nav => nav.classList.remove("actives", "active"));

            this.classList.add("actives");
        });
    });

    // upload images
    $(document).ready(function () {
        const previewContainer = $('#imagePreview');
        const fileInput = $('#formValidationFile');
        const hiddenCheckedImage = $('#checkedImage');
        const deletedImagesInput = $('#deleted-image-ids');

        // Xử lý khi thêm ảnh mới từ input file
        fileInput.on('change', function (event) {
            const files = Array.from(event.target.files); // Lấy danh sách file đã chọn
            const dataTransfer = new DataTransfer(); // Đối tượng để cập nhật danh sách file

            files.forEach((file, index) => {
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Tạo thẻ img
                    const img = $('<img>', {
                        src: e.target.result,
                        'data-filename': file.name,
                        class: 'col-4 mb-3',
                        css: { maxWidth: '100%' }
                    });

                    // Tạo radio button
                    const radio = $('<input>', {
                        type: 'radio',
                        name: 'imageRep',
                        value: file.name,
                        id: `radio-new-${index}`,
                    }).addClass('me-2');

                    const label = $('<label>', {
                        for: `radio-new-${index}`,
                        text: 'Chọn ảnh này làm đại diện',
                    });

                    const radioContainer = $('<div>').append(radio).append(label);

                    // Tạo nút xóa
                    const removeBtn = $('<button>', {
                        type: 'button',
                        class: 'btn btn-danger btn-sm mt-2',
                        text: 'Xóa',
                        click: function () {
                            const col = $(this).closest('.col-3');
                            const fileName = col.find('img').data('filename');

                            col.remove(); // Xóa ảnh khỏi giao diện

                            // Lọc lại danh sách file không bị xóa
                            const remainingFiles = files.filter(f =>
                                previewContainer.find(`img[data-filename="${f.name}"]`).length > 0
                            );

                            // Cập nhật DataTransfer
                            dataTransfer.items.clear();
                            remainingFiles.forEach(f => dataTransfer.items.add(f));

                            // Cập nhật lại input file
                            fileInput[0].files = dataTransfer.files;

                            // Nếu ảnh bị xóa là ảnh đại diện, chọn ảnh đầu tiên còn lại
                            if (hiddenCheckedImage.val() === fileName) {
                                const firstRadio = previewContainer.find('input[name="imageRep"]').first();
                                if (firstRadio.length) {
                                    firstRadio.prop('checked', true).trigger('change');
                                } else {
                                    hiddenCheckedImage.val('');
                                }
                            }
                        }
                    });

                    // Gộp thành một col chứa img, radio và nút xóa
                    const col = $('<div>', { class: 'col-3 mb-3' })
                        .append(img)
                        .append(radioContainer)
                        .append(removeBtn);

                    previewContainer.append(col);
                };

                reader.readAsDataURL(file); // Đọc file dưới dạng URL

                // Thêm file vào DataTransfer để đảm bảo đồng bộ input file
                dataTransfer.items.add(file);
            });

            // Cập nhật lại input file
            fileInput[0].files = dataTransfer.files;

            // Cập nhật ảnh đại diện mặc định
            if (!hiddenCheckedImage.val()) {
                hiddenCheckedImage.val(files[0]?.name || '');
            }
        });

        // Xử lý khi xóa ảnh có sẵn
        previewContainer.on('click', '.btn-delete-img', function () {
            const button = $(this);
            const imageId = button.data('id');
            const imageItem = button.closest('.image-item');
            const radio = imageItem.find('input[name="imageRep"]');

            // Thêm ID vào input hidden
            deletedImagesInput.val(deletedImagesInput.val() + imageId + ',');

            // Kiểm tra nếu ảnh bị xóa là ảnh đại diện
            if (radio.prop('checked')) {
                const remainingRadios = previewContainer.find('input[name="imageRep"]:not(:checked)');
                if (remainingRadios.length > 0) {
                    remainingRadios.first().prop('checked', true).trigger('change');
                } else {
                    hiddenCheckedImage.val('');
                }
            }

            // Xóa ảnh khỏi giao diện
            imageItem.remove();
        });

        // Cập nhật giá trị input hidden khi thay đổi radio
        previewContainer.on('change', 'input[name="imageRep"]', function () {
            hiddenCheckedImage.val($(this).val());
        });
    });
    // end upload images



    $(document).ready(function () {
        // Event delegation cho các select trong container cha
        $(document).on('change', '.attribute-select', function () {
            // Lấy chỉ số của biến thể từ ID của container cha
            const variantIndex = $(this).closest('.attributes-container').attr('id').split('_')[1];
            

            // Gọi hàm xử lý cập nhật
            updateAttributesJson(variantIndex);
        });
    });

    function showvalue(selectElement, variantIndex, attrIndex) {

        const attributeId = selectElement.value;
        const attributeValueSelect = document.getElementById(`attributeValueSelect_[${variantIndex}][${attrIndex}]`);


        if (selectElement.value) {
            const selectedAttributeId = selectElement.value;
            $.ajax({
                url: '@Url.Action("GetValuesAttribute", "Products")',
                type: 'POST',
                data: { attributeId: selectedAttributeId },
                success: function (rs) {
                        if (rs.success) {
                            attributeValueSelect.innerHTML = '';
                            attributeValueSelect.innerHTML = '<option value="" selected>-- Chọn giá trị thuộc tính</option>';
                            // Thêm tùy chọn mặc định
                            rs.data.forEach(function (item) {
                                const option = document.createElement('option');
                                option.value = item.id;
                                option.text = item.value;
                                attributeValueSelect.appendChild(option);
                        });


                    }
                },
                error: function () {
                    alert('Đã xảy ra lỗi.');
                }
            });

        }else {
            attributeValueSelect.innerHTML = '';
            attributeValueSelect.innerHTML = '<option value="" selected>-- Chọn giá trị thuộc tính</option>';
        }
    }

    // add thuộc tính
    let attributeIndex = 1; // Chỉ số cho thuộc tính trong một biến thể
    // add attributes to product
   

    function addAttribute(variantIndex) {

        const attributesContainer = document.getElementById(`attributes-container_${variantIndex}`);

        // Tạo phần tử mới cho thuộc tính
        const newAttributeHtml = `
                                                                  <div class="d-flex align-items-center mb-2">
                                                                    <div class="form-group me-3">
                                                                        <label class="control-label">Thuộc tính</label>
                                                                                        <select name="attribute-select" id="attributeSelect_[${variantIndex}][${attributeIndex}]" class="form-control attribute-select" onchange="showvalue(this, ${variantIndex}, ${attributeIndex})">
                                                                            <option value="">-- Chọn thuộc tính sản phẩm</option>
    @foreach (var attribute in (SelectList)listatt)
    {
                                                                                                                 <option value="@(attribute.Value)">@(attribute.Text)</option>
    }
                                                                        </select>
                                                                    </div>
                                                                    <div class="form-group me-3">
                                                                        <label for="AttributeValue">Giá trị thuộc tính:</label>
                                                                                        <select class="form-control attribute-select" id="attributeValueSelect_[${variantIndex}][${attributeIndex}]" name="attributevalue-select">
                                                                            <option value="">-- Chọn giá trị thuộc tính</option>
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                            `;

        // Chèn thuộc tính mới vào container thuộc tính
        attributesContainer.insertAdjacentHTML('beforeend', newAttributeHtml);
        attributeIndex++; // Tăng chỉ số attribute cho lần thêm sau
    }

    function addVariant() {
        const variantIndex = document.querySelectorAll('.variant').length;
        const container = document.getElementById('variant-container');
        const newVariant = document.createElement('div');

        newVariant.className = 'variant mb-3 p-3 border rounded d-flex align-items-center';
        
        newVariant.innerHTML = `
                                                               

                                                                 <button type="button" class="btn btn-link" onclick="addAttribute(${variantIndex})"><i class='bx bx-plus-circle'></i></button>

                                                                 <div class="attributes-container" id="attributes-container_${variantIndex}" style="flex-grow: 1;">
                                                                         <div class="d-flex align-items-center mb-2">
                                                                              <div class="form-group me-3">
                                                                                  <label class="control-label">Thuộc tính</label>
                                                                                                  <select name="attribute-select" id="attributeSelect_[${variantIndex}][0]" class="form-control attribute-select" onchange="showvalue(this, ${variantIndex} , 0)">
                                                                                       <option  value="">-- Chọn thuộc tính sản phẩm</option>
    @foreach (var attribute in (SelectList)listatt)
    {
                                                                                                                            <option value="@(attribute.Value)">@(attribute.Text)</option>
    }
                                                                                  </select>
                                                                              </div>
                                                                              <div class="form-group me-3">
                                                                                  <label for="AttributeValue">Giá trị thuộc tính:</label>
                                                                                          <select class="form-control attribute-select" name="attributevalue-select" id="attributeValueSelect_[${variantIndex}][0]">
                                                                                       <option  value="">-- Chọn giá trị thuộc tính</option>

                                                                                  </select>
                                                                              </div>
                                                                       </div>
                                                                                   <input type="hidden" id="variants[${variantIndex}].AttributesJson" name="variants[${variantIndex}].AttributesJson" />
                                                               </div>

                                                                <div class="form-group me-3" id="price-input_${variantIndex}">
                                                                    <label for="AdditionalPrice">Giá bổ sung:</label>
                                                                    <input class="form-control" type="number" name="variants[${variantIndex}].AdditionalPrice" placeholder="Nhập giá bổ sung" />
                                                                </div>
                                                                <div class="form-group me-3" id="quantity-input_${variantIndex}">
                                                                    <label for="Quantity">Số lượng:</label>
                                                                    <input class="form-control" type="number" name="variants[${variantIndex}].Quantity" placeholder="Nhập số lượng" />
                                                                </div>
                                                                <button type="button" class="btn btn-danger ms-3" onclick="removeVariant(this)">Xóa</button>
                                                            `;

        container.appendChild(newVariant);
        attributeIndex = 1; // Reset chỉ số thuộc tính cho biến thể mới
    }



    function updateAttributesJson(variantIndex) {
        // Tạo một mảng để lưu các thuộc tính
        const attributesJsonArray = [];

        // Lặp qua tất cả các thuộc tính của biến thể
        const attributeSelects = document.querySelectorAll(`#attributes-container_${variantIndex} .form-group select[name='attribute-select']`);

        const attributesJsonInput = document.getElementById(`variants[${variantIndex}].AttributesJson`);

        attributeSelects.forEach(function (attributeSelect, index) {
            const attributeValueSelect = document.getElementById(`attributeValueSelect_[${variantIndex}][${index}]`);
                
            if(attributeValueSelect){
                const attributeName = attributeSelect.value;
                const attributeValue = attributeValueSelect.value;

                // Nếu thuộc tính và giá trị không rỗng, thêm vào mảng
                if (attributeName && attributeValue && attributeValue !== "") {
                    attributesJsonArray.push({
                        AttributeName: attributeName,
                        AttributeValue: attributeValue
                    });
                }
            }

            
        });


        // Chuyển mảng đối tượng thành chuỗi JSON và cập nhật vào trường input JSON
        attributesJsonInput.value = JSON.stringify(attributesJsonArray);
    }

    // end add thuộc tính


    // xoá biến thể
    function removeVariant(button) {
        const variantElement = button.closest('.variant');
        
        if (variantElement) {
            variantElement.remove();
        }
    }
</script>
